{"ast":null,"code":"// filepath: /Users/n0096336/Downloads/FullStack/capstone2/customer-management-app/src/services/customerService.js\nconst API_BASE_URL='http://localhost:3001/api';// Assuming your server runs on port 3001\nexport const getCustomers=async()=>{try{const response=await fetch(\"\".concat(API_BASE_URL,\"/customers\"));if(!response.ok){throw new Error(\"HTTP error! status: \".concat(response.status));}return await response.json();}catch(error){console.error(\"Failed to fetch customers:\",error);return[];// Return empty array or handle error as appropriate\n}};export const addCustomer=async customer=>{try{const response=await fetch(\"\".concat(API_BASE_URL,\"/customers\"),{method:'POST',headers:{'Content-Type':'application/json'},body:JSON.stringify(customer)});if(!response.ok){throw new Error(\"HTTP error! status: \".concat(response.status));}return await response.json();}catch(error){console.error(\"Failed to add customer:\",error);throw error;// Re-throw or handle error as appropriate\n}};export const updateCustomer=async(id,updatedData)=>{try{const response=await fetch(\"\".concat(API_BASE_URL,\"/customers/\").concat(id),{method:'PUT',headers:{'Content-Type':'application/json'},body:JSON.stringify(updatedData)});if(!response.ok){throw new Error(\"HTTP error! status: \".concat(response.status));}return await response.json();}catch(error){console.error(\"Failed to update customer \".concat(id,\":\"),error);throw error;// Re-throw or handle error as appropriate\n}};export const deleteCustomer=async id=>{try{const response=await fetch(\"\".concat(API_BASE_URL,\"/customers/\").concat(id),{method:'DELETE'});if(!response.ok){// If the server returns a JSON error message, try to parse it\nlet errorMessage=\"HTTP error! status: \".concat(response.status);try{const errorBody=await response.json();errorMessage=errorBody.message||errorMessage;}catch(e){// Ignore if response is not JSON\n}throw new Error(errorMessage);}// DELETE might not return a body or return a confirmation message\n// If it returns JSON: return await response.json();\n// If it returns no content (204) or text:\nreturn{message:'Customer deleted successfully'};// Or handle as appropriate\n}catch(error){console.error(\"Failed to delete customer \".concat(id,\":\"),error);throw error;// Re-throw or handle error as appropriate\n}};","map":{"version":3,"names":["API_BASE_URL","getCustomers","response","fetch","concat","ok","Error","status","json","error","console","addCustomer","customer","method","headers","body","JSON","stringify","updateCustomer","id","updatedData","deleteCustomer","errorMessage","errorBody","message","e"],"sources":["/Users/n0096336/Downloads/FullStack/capstone2/customer-management-app/src/services/customerService.js"],"sourcesContent":["// filepath: /Users/n0096336/Downloads/FullStack/capstone2/customer-management-app/src/services/customerService.js\nconst API_BASE_URL = 'http://localhost:3001/api'; // Assuming your server runs on port 3001\n\nexport const getCustomers = async () => {\n    try {\n        const response = await fetch(`${API_BASE_URL}/customers`);\n        if (!response.ok) {\n            throw new Error(`HTTP error! status: ${response.status}`);\n        }\n        return await response.json();\n    } catch (error) {\n        console.error(\"Failed to fetch customers:\", error);\n        return []; // Return empty array or handle error as appropriate\n    }\n};\n\nexport const addCustomer = async (customer) => {\n    try {\n        const response = await fetch(`${API_BASE_URL}/customers`, {\n            method: 'POST',\n            headers: {\n                'Content-Type': 'application/json',\n            },\n            body: JSON.stringify(customer),\n        });\n        if (!response.ok) {\n            throw new Error(`HTTP error! status: ${response.status}`);\n        }\n        return await response.json();\n    } catch (error) {\n        console.error(\"Failed to add customer:\", error);\n        throw error; // Re-throw or handle error as appropriate\n    }\n};\n\nexport const updateCustomer = async (id, updatedData) => {\n    try {\n        const response = await fetch(`${API_BASE_URL}/customers/${id}`, {\n            method: 'PUT',\n            headers: {\n                'Content-Type': 'application/json',\n            },\n            body: JSON.stringify(updatedData),\n        });\n        if (!response.ok) {\n            throw new Error(`HTTP error! status: ${response.status}`);\n        }\n        return await response.json();\n    } catch (error) {\n        console.error(`Failed to update customer ${id}:`, error);\n        throw error; // Re-throw or handle error as appropriate\n    }\n};\n\nexport const deleteCustomer = async (id) => {\n    try {\n        const response = await fetch(`${API_BASE_URL}/customers/${id}`, {\n            method: 'DELETE',\n        });\n        if (!response.ok) {\n            // If the server returns a JSON error message, try to parse it\n            let errorMessage = `HTTP error! status: ${response.status}`;\n            try {\n                const errorBody = await response.json();\n                errorMessage = errorBody.message || errorMessage;\n            } catch (e) {\n                // Ignore if response is not JSON\n            }\n            throw new Error(errorMessage);\n        }\n        // DELETE might not return a body or return a confirmation message\n        // If it returns JSON: return await response.json();\n        // If it returns no content (204) or text:\n        return { message: 'Customer deleted successfully' }; // Or handle as appropriate\n    } catch (error) {\n        console.error(`Failed to delete customer ${id}:`, error);\n        throw error; // Re-throw or handle error as appropriate\n    }\n};"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}