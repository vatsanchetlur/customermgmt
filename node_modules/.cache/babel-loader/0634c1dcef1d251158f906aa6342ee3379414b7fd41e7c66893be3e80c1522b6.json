{"ast":null,"code":"// filepath: /Users/n0096336/Downloads/FullStack/capstone2/customer-management-app/src/services/customerService.js\n// LocalStorage key for customer data persistence\nconst STORAGE_KEY = 'customer-management-data';\n\n// Helper to check if we've already initialized localStorage\nconst isInitialized = () => {\n  return localStorage.getItem(STORAGE_KEY) !== null;\n};\n\n// Initialize from JSON file if needed\nconst initializeFromJson = async () => {\n  try {\n    const response = await fetch('/data/customers.json');\n    if (!response.ok) {\n      throw new Error(`HTTP error! status: ${response.status}`);\n    }\n    const initialData = await response.json();\n    localStorage.setItem(STORAGE_KEY, JSON.stringify(initialData));\n    return initialData;\n  } catch (error) {\n    console.error(\"Failed to load initial data:\", error);\n    return [];\n  }\n};\nexport const getCustomers = async () => {\n  try {\n    // If not initialized, load from JSON file\n    if (!isInitialized()) {\n      return await initializeFromJson();\n    }\n\n    // Otherwise get from localStorage\n    const data = localStorage.getItem(STORAGE_KEY);\n    return JSON.parse(data) || [];\n  } catch (error) {\n    console.error(\"Failed to fetch customers:\", error);\n    return []; // Return empty array on error\n  }\n};\nexport const addCustomer = async customer => {\n  try {\n    // Get current customers\n    const currentCustomers = await getCustomers();\n\n    // Generate a new ID (max + 1)\n    const nextId = currentCustomers.length > 0 ? Math.max(...currentCustomers.map(c => c.id)) + 1 : 1;\n\n    // Create new customer with ID\n    const newCustomer = {\n      id: nextId,\n      ...customer\n    };\n\n    // Add to list and save\n    const updatedCustomers = [...currentCustomers, newCustomer];\n    localStorage.setItem(STORAGE_KEY, JSON.stringify(updatedCustomers));\n    return newCustomer;\n  } catch (error) {\n    console.error(\"Failed to add customer:\", error);\n    throw error;\n  }\n};\nexport const updateCustomer = async (id, updatedData) => {\n  try {\n    const customers = await getCustomers();\n    const index = customers.findIndex(c => c.id === id);\n    if (index === -1) {\n      throw new Error(`Customer with ID ${id} not found`);\n    }\n\n    // Update the customer\n    const updatedCustomer = {\n      ...customers[index],\n      ...updatedData\n    };\n    customers[index] = updatedCustomer;\n\n    // Save to localStorage\n    localStorage.setItem(STORAGE_KEY, JSON.stringify(customers));\n    return updatedCustomer;\n  } catch (error) {\n    console.error(`Failed to update customer ${id}:`, error);\n    throw error;\n  }\n};\nexport const deleteCustomer = async id => {\n  try {\n    const customers = await getCustomers();\n    const filteredCustomers = customers.filter(c => c.id !== id);\n    if (filteredCustomers.length === customers.length) {\n      throw new Error(`Customer with ID ${id} not found`);\n    }\n\n    // Save filtered list\n    localStorage.setItem(STORAGE_KEY, JSON.stringify(filteredCustomers));\n    return {\n      message: 'Customer deleted successfully'\n    };\n  } catch (error) {\n    console.error(`Failed to delete customer ${id}:`, error);\n    throw error;\n  }\n};","map":{"version":3,"names":["STORAGE_KEY","isInitialized","localStorage","getItem","initializeFromJson","response","fetch","ok","Error","status","initialData","json","setItem","JSON","stringify","error","console","getCustomers","data","parse","addCustomer","customer","currentCustomers","nextId","length","Math","max","map","c","id","newCustomer","updatedCustomers","updateCustomer","updatedData","customers","index","findIndex","updatedCustomer","deleteCustomer","filteredCustomers","filter","message"],"sources":["/Users/n0096336/Downloads/FullStack/capstone2/customer-management-app/src/services/customerService.js"],"sourcesContent":["// filepath: /Users/n0096336/Downloads/FullStack/capstone2/customer-management-app/src/services/customerService.js\n// LocalStorage key for customer data persistence\nconst STORAGE_KEY = 'customer-management-data';\n\n// Helper to check if we've already initialized localStorage\nconst isInitialized = () => {\n    return localStorage.getItem(STORAGE_KEY) !== null;\n};\n\n// Initialize from JSON file if needed\nconst initializeFromJson = async () => {\n    try {\n        const response = await fetch('/data/customers.json');\n        if (!response.ok) {\n            throw new Error(`HTTP error! status: ${response.status}`);\n        }\n        const initialData = await response.json();\n        localStorage.setItem(STORAGE_KEY, JSON.stringify(initialData));\n        return initialData;\n    } catch (error) {\n        console.error(\"Failed to load initial data:\", error);\n        return [];\n    }\n};\n\nexport const getCustomers = async () => {\n    try {\n        // If not initialized, load from JSON file\n        if (!isInitialized()) {\n            return await initializeFromJson();\n        }\n        \n        // Otherwise get from localStorage\n        const data = localStorage.getItem(STORAGE_KEY);\n        return JSON.parse(data) || [];\n    } catch (error) {\n        console.error(\"Failed to fetch customers:\", error);\n        return []; // Return empty array on error\n    }\n};\n\nexport const addCustomer = async (customer) => {\n    try {\n        // Get current customers\n        const currentCustomers = await getCustomers();\n        \n        // Generate a new ID (max + 1)\n        const nextId = currentCustomers.length > 0 \n            ? Math.max(...currentCustomers.map(c => c.id)) + 1 \n            : 1;\n        \n        // Create new customer with ID\n        const newCustomer = { \n            id: nextId,\n            ...customer \n        };\n        \n        // Add to list and save\n        const updatedCustomers = [...currentCustomers, newCustomer];\n        localStorage.setItem(STORAGE_KEY, JSON.stringify(updatedCustomers));\n        \n        return newCustomer;\n    } catch (error) {\n        console.error(\"Failed to add customer:\", error);\n        throw error;\n    }\n};\n\nexport const updateCustomer = async (id, updatedData) => {\n    try {\n        const customers = await getCustomers();\n        const index = customers.findIndex(c => c.id === id);\n        \n        if (index === -1) {\n            throw new Error(`Customer with ID ${id} not found`);\n        }\n        \n        // Update the customer\n        const updatedCustomer = { \n            ...customers[index], \n            ...updatedData \n        };\n        customers[index] = updatedCustomer;\n        \n        // Save to localStorage\n        localStorage.setItem(STORAGE_KEY, JSON.stringify(customers));\n        \n        return updatedCustomer;\n    } catch (error) {\n        console.error(`Failed to update customer ${id}:`, error);\n        throw error;\n    }\n};\n\nexport const deleteCustomer = async (id) => {\n    try {\n        const customers = await getCustomers();\n        const filteredCustomers = customers.filter(c => c.id !== id);\n        \n        if (filteredCustomers.length === customers.length) {\n            throw new Error(`Customer with ID ${id} not found`);\n        }\n        \n        // Save filtered list\n        localStorage.setItem(STORAGE_KEY, JSON.stringify(filteredCustomers));\n        \n        return { message: 'Customer deleted successfully' };\n    } catch (error) {\n        console.error(`Failed to delete customer ${id}:`, error);\n        throw error;\n    }\n};"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}