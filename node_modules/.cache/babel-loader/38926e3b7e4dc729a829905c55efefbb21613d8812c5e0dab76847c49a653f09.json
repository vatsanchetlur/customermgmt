{"ast":null,"code":"// filepath: /Users/n0096336/Downloads/FullStack/capstone2/customer-management-app/src/services/customerService.js\nconst API_BASE_URL = 'http://localhost:3001/api';\nexport const getCustomers = async () => {\n  try {\n    console.log('Fetching customers from API...');\n    const response = await fetch(`${API_BASE_URL}/customers`);\n    if (!response.ok) {\n      throw new Error(`HTTP error! status: ${response.status}`);\n    }\n    const data = await response.json();\n    console.log('Fetched customers:', data);\n    return data;\n  } catch (error) {\n    console.error(\"Failed to fetch customers:\", error);\n    return []; // Return empty array on error\n  }\n};\nexport const addCustomer = async customer => {\n  try {\n    console.log('Adding customer:', customer);\n    const response = await fetch(`${API_BASE_URL}/customers`, {\n      method: 'POST',\n      headers: {\n        'Content-Type': 'application/json'\n      },\n      body: JSON.stringify(customer)\n    });\n    if (!response.ok) {\n      throw new Error(`HTTP error! status: ${response.status}`);\n    }\n    const newCustomer = await response.json();\n    console.log('Added customer:', newCustomer);\n    return newCustomer;\n  } catch (error) {\n    console.error(\"Failed to add customer:\", error);\n    throw error;\n  }\n};\nexport const updateCustomer = async (id, updatedData) => {\n  try {\n    console.log('Updating customer:', id, updatedData);\n    const response = await fetch(`${API_BASE_URL}/customers/${id}`, {\n      method: 'PUT',\n      headers: {\n        'Content-Type': 'application/json'\n      },\n      body: JSON.stringify(updatedData)\n    });\n    if (!response.ok) {\n      throw new Error(`HTTP error! status: ${response.status}`);\n    }\n    const updatedCustomer = await response.json();\n    console.log('Updated customer:', updatedCustomer);\n    return updatedCustomer;\n  } catch (error) {\n    console.error(`Failed to update customer ${id}:`, error);\n    throw error;\n  }\n};\nexport const deleteCustomer = async id => {\n  try {\n    console.log('Deleting customer:', id);\n    const response = await fetch(`${API_BASE_URL}/customers/${id}`, {\n      method: 'DELETE'\n    });\n    if (!response.ok) {\n      throw new Error(`HTTP error! status: ${response.status}`);\n    }\n    console.log('Deleted customer:', id);\n    return {\n      message: 'Customer deleted successfully'\n    };\n  } catch (error) {\n    console.error(`Failed to delete customer ${id}:`, error);\n    throw error;\n  }\n};","map":{"version":3,"names":["API_BASE_URL","getCustomers","console","log","response","fetch","ok","Error","status","data","json","error","addCustomer","customer","method","headers","body","JSON","stringify","newCustomer","updateCustomer","id","updatedData","updatedCustomer","deleteCustomer","message"],"sources":["/Users/n0096336/Downloads/FullStack/capstone2/customer-management-app/src/services/customerService.js"],"sourcesContent":["// filepath: /Users/n0096336/Downloads/FullStack/capstone2/customer-management-app/src/services/customerService.js\nconst API_BASE_URL = 'http://localhost:3001/api';\n\nexport const getCustomers = async () => {\n    try {\n        console.log('Fetching customers from API...');\n        const response = await fetch(`${API_BASE_URL}/customers`);\n        if (!response.ok) {\n            throw new Error(`HTTP error! status: ${response.status}`);\n        }\n        const data = await response.json();\n        console.log('Fetched customers:', data);\n        return data;\n    } catch (error) {\n        console.error(\"Failed to fetch customers:\", error);\n        return []; // Return empty array on error\n    }\n};\n\nexport const addCustomer = async (customer) => {\n    try {\n        console.log('Adding customer:', customer);\n        const response = await fetch(`${API_BASE_URL}/customers`, {\n            method: 'POST',\n            headers: {\n                'Content-Type': 'application/json',\n            },\n            body: JSON.stringify(customer),\n        });\n        if (!response.ok) {\n            throw new Error(`HTTP error! status: ${response.status}`);\n        }\n        const newCustomer = await response.json();\n        console.log('Added customer:', newCustomer);\n        return newCustomer;\n    } catch (error) {\n        console.error(\"Failed to add customer:\", error);\n        throw error;\n    }\n};\n\nexport const updateCustomer = async (id, updatedData) => {\n    try {\n        console.log('Updating customer:', id, updatedData);\n        const response = await fetch(`${API_BASE_URL}/customers/${id}`, {\n            method: 'PUT',\n            headers: {\n                'Content-Type': 'application/json',\n            },\n            body: JSON.stringify(updatedData),\n        });\n        if (!response.ok) {\n            throw new Error(`HTTP error! status: ${response.status}`);\n        }\n        const updatedCustomer = await response.json();\n        console.log('Updated customer:', updatedCustomer);\n        return updatedCustomer;\n    } catch (error) {\n        console.error(`Failed to update customer ${id}:`, error);\n        throw error;\n    }\n};\n\nexport const deleteCustomer = async (id) => {\n    try {\n        console.log('Deleting customer:', id);\n        const response = await fetch(`${API_BASE_URL}/customers/${id}`, {\n            method: 'DELETE',\n        });\n        if (!response.ok) {\n            throw new Error(`HTTP error! status: ${response.status}`);\n        }\n        console.log('Deleted customer:', id);\n        return { message: 'Customer deleted successfully' };\n    } catch (error) {\n        console.error(`Failed to delete customer ${id}:`, error);\n        throw error;\n    }\n};"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}