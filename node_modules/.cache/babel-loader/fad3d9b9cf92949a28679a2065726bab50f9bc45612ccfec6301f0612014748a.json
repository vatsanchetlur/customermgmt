{"ast":null,"code":"// filepath: /Users/n0096336/Downloads/FullStack/capstone2/customer-management-app/src/services/customerService.js\nconst API_BASE_URL = 'http://localhost:3001/api'; // Assuming your server runs on port 3001\n\nexport const getCustomers = async () => {\n  try {\n    const response = await fetch(`${API_BASE_URL}/customers`);\n    if (!response.ok) {\n      throw new Error(`HTTP error! status: ${response.status}`);\n    }\n    return await response.json();\n  } catch (error) {\n    console.error(\"Failed to fetch customers:\", error);\n    return []; // Return empty array or handle error as appropriate\n  }\n};\nexport const addCustomer = async customer => {\n  try {\n    const response = await fetch(`${API_BASE_URL}/customers`, {\n      method: 'POST',\n      headers: {\n        'Content-Type': 'application/json'\n      },\n      body: JSON.stringify(customer)\n    });\n    if (!response.ok) {\n      throw new Error(`HTTP error! status: ${response.status}`);\n    }\n    return await response.json();\n  } catch (error) {\n    console.error(\"Failed to add customer:\", error);\n    throw error; // Re-throw or handle error as appropriate\n  }\n};\nexport const updateCustomer = async (id, updatedData) => {\n  try {\n    const response = await fetch(`${API_BASE_URL}/customers/${id}`, {\n      method: 'PUT',\n      headers: {\n        'Content-Type': 'application/json'\n      },\n      body: JSON.stringify(updatedData)\n    });\n    if (!response.ok) {\n      throw new Error(`HTTP error! status: ${response.status}`);\n    }\n    return await response.json();\n  } catch (error) {\n    console.error(`Failed to update customer ${id}:`, error);\n    throw error; // Re-throw or handle error as appropriate\n  }\n};\nexport const deleteCustomer = async id => {\n  try {\n    const response = await fetch(`${API_BASE_URL}/customers/${id}`, {\n      method: 'DELETE'\n    });\n    if (!response.ok) {\n      // If the server returns a JSON error message, try to parse it\n      let errorMessage = `HTTP error! status: ${response.status}`;\n      try {\n        const errorBody = await response.json();\n        errorMessage = errorBody.message || errorMessage;\n      } catch (e) {\n        // Ignore if response is not JSON\n      }\n      throw new Error(errorMessage);\n    }\n    // DELETE might not return a body or return a confirmation message\n    // If it returns JSON: return await response.json();\n    // If it returns no content (204) or text:\n    return {\n      message: 'Customer deleted successfully'\n    }; // Or handle as appropriate\n  } catch (error) {\n    console.error(`Failed to delete customer ${id}:`, error);\n    throw error; // Re-throw or handle error as appropriate\n  }\n};","map":{"version":3,"names":["API_BASE_URL","getCustomers","response","fetch","ok","Error","status","json","error","console","addCustomer","customer","method","headers","body","JSON","stringify","updateCustomer","id","updatedData","deleteCustomer","errorMessage","errorBody","message","e"],"sources":["/Users/n0096336/Downloads/FullStack/capstone2/customer-management-app/src/services/customerService.js"],"sourcesContent":["// filepath: /Users/n0096336/Downloads/FullStack/capstone2/customer-management-app/src/services/customerService.js\nconst API_BASE_URL = 'http://localhost:3001/api'; // Assuming your server runs on port 3001\n\nexport const getCustomers = async () => {\n    try {\n        const response = await fetch(`${API_BASE_URL}/customers`);\n        if (!response.ok) {\n            throw new Error(`HTTP error! status: ${response.status}`);\n        }\n        return await response.json();\n    } catch (error) {\n        console.error(\"Failed to fetch customers:\", error);\n        return []; // Return empty array or handle error as appropriate\n    }\n};\n\nexport const addCustomer = async (customer) => {\n    try {\n        const response = await fetch(`${API_BASE_URL}/customers`, {\n            method: 'POST',\n            headers: {\n                'Content-Type': 'application/json',\n            },\n            body: JSON.stringify(customer),\n        });\n        if (!response.ok) {\n            throw new Error(`HTTP error! status: ${response.status}`);\n        }\n        return await response.json();\n    } catch (error) {\n        console.error(\"Failed to add customer:\", error);\n        throw error; // Re-throw or handle error as appropriate\n    }\n};\n\nexport const updateCustomer = async (id, updatedData) => {\n    try {\n        const response = await fetch(`${API_BASE_URL}/customers/${id}`, {\n            method: 'PUT',\n            headers: {\n                'Content-Type': 'application/json',\n            },\n            body: JSON.stringify(updatedData),\n        });\n        if (!response.ok) {\n            throw new Error(`HTTP error! status: ${response.status}`);\n        }\n        return await response.json();\n    } catch (error) {\n        console.error(`Failed to update customer ${id}:`, error);\n        throw error; // Re-throw or handle error as appropriate\n    }\n};\n\nexport const deleteCustomer = async (id) => {\n    try {\n        const response = await fetch(`${API_BASE_URL}/customers/${id}`, {\n            method: 'DELETE',\n        });\n        if (!response.ok) {\n            // If the server returns a JSON error message, try to parse it\n            let errorMessage = `HTTP error! status: ${response.status}`;\n            try {\n                const errorBody = await response.json();\n                errorMessage = errorBody.message || errorMessage;\n            } catch (e) {\n                // Ignore if response is not JSON\n            }\n            throw new Error(errorMessage);\n        }\n        // DELETE might not return a body or return a confirmation message\n        // If it returns JSON: return await response.json();\n        // If it returns no content (204) or text:\n        return { message: 'Customer deleted successfully' }; // Or handle as appropriate\n    } catch (error) {\n        console.error(`Failed to delete customer ${id}:`, error);\n        throw error; // Re-throw or handle error as appropriate\n    }\n};"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}